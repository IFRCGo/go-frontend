/* ==========================================================================
   Grid
   ========================================================================== */

// ---------------------------------------------
// GRID: CONTAINERS
//  - Wrap a row in a container

// Container: Mixin
//  - All parameters have defaults
//  - Parameters:
//    - $max-width {number} : Maximum width
//    - $centered {boolean} : Horizontally centers container
//    - $grid-gutter {number} : Gutter or horizontal padding
@mixin container ($max-width: $media-large, $centered: true, $grid-gutter: $grid-gutter) {
  @if $max-width {
    max-width: $max-width;
  }
  
  @if $centered {
    margin-left: auto;
    margin-right: auto;
  }

  @if $grid-gutter {
    padding-left: $grid-gutter;
    padding-right: $grid-gutter;
  }
}

// Container: Default / Large
.container-lg {
  @include container($max-width: $media-large, $grid-gutter: $grid-gutter);

  @include media(medium) {
    padding-left: $spacing * 8;
    padding-right: $spacing * 8;
  }
}

// Container: Medium
.container-mid {
  @include container($media-medium);

  @include media(medium) {
    padding-left: $spacing-4;
    padding-right: $spacing-4;
  }
}

// Container: Small
.container-sm {
  @include container($media-small);

  @include media(medium) {
    padding-left: $spacing-4;
    padding-right: $spacing-4;
  }
}

// Container: Extra small
.container-xs {
  @include container($media-xsmall);
}

// Container: Full Width
.container-full {
  @include container($max-width: false);
}


// ---------------------------------------------
// GRID: CLEARFIX
// Add a clearfix class or mixin to the parent of floated children

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

.clearfix {
  @include clearfix;
}


// ---------------------------------------------
// GRID: ROWS
//  - Used to wrap grid columns
//  - Rows reset the 1st column's left and last column's right gutter
//  - Must be wrapped in a container
//  - All parameters have defaults
//  - Parameters:
//    - $grid-gutter {number}: Negative margins to offset horizontal padding

// Row: Mixin
@mixin row($grid-gutter: $grid-gutter) {
  margin-left: -$grid-gutter;
  margin-right: -$grid-gutter;   
  @include clearfix;
}

// Row: Default
.row {
  @include row;
}

// Row: Small
.row-sm {
  @include row($grid-gutter: $grid-gutter-sm);
}

// Row: Large
.row-lg {
  @include row($grid-gutter: $grid-gutter-lg);
}


// ---------------------------------------------
// GRID: COLUMNS
//  - Wrap in a row: 
//  - Columns create gutters
//  - All parameters have defaults
//  - Parameters:
//    - $width {number} : defaults to false, i.e. width not set;
//    - $grid-gutter {number} : Gutter or horizontal padding
 //   - $spacing-v {number} : Vertical padding (top and bottom), defaults to false, i.e. padding not set

// Column: Mixin
@mixin col($width: false, $grid-gutter: $grid-gutter, $spacing-v: false) {

  @if $width {
    width: $width;
  }

  @if $spacing-v {
    padding-top: $global-spacing;
    padding-bottom: $global-spacing;
  }

  @if $grid-gutter {
    padding-left: $grid-gutter;
    padding-right: $grid-gutter;
  }
}

// Column: Default
.col {
  @include col;
}

// Column: Small gutters

@mixin col-sm {
  @include col($grid-gutter: $grid-gutter-sm);
}

.col-sm {
  @include col-sm;
}

// Column: Large gutters
@mixin col-lg {
  @include col($grid-gutter: $grid-gutter-lg);
}

.col-lg {
  @include col-lg;
}

// ---------------------------------------------
// Column: Classes
// Generates classes for 12 columns

// Classes: Default
// E.g., .col-1, .col-12 
@for $i from 1 through $grid-column-count {
  .col-#{$i} { 
    width: percentage($i / $grid-column-count);
  }
}

// Classes: Extra Small Breakpoint
// E.g., .col-1-xs, .col-12-xs 
@include media (xsmall) {
  @for $i from 1 through $grid-column-count {
    .col-#{$i}-xs {
      width: percentage($i / $grid-column-count);
    }
  }
}

// Classes: Small Breakpoint
// E.g., .col-1-sm, .col-12-sm 
@include media(small) {
  @for $i from 1 through $grid-column-count {
    .col-#{$i}-sm {
      width: percentage($i / $grid-column-count);
    }
  }
}

// Classes: Medium Breakpoint
// E.g., .col-1-mid, .col-12-mid 
@include media(medium) {
  @for $i from 1 through $grid-column-count {
    .col-#{$i}-mid {
      width: percentage($i / $grid-column-count);
    }
  }
}

// Classes: Large Breakpoint
// E.g., .col-1-lg, .col-12-lg 
@include media(large) {
  @for $i from 1 through $grid-column-count {
    .col-#{$i}-lg {
      width: percentage($i / $grid-column-count);
    }
  }
}


// ---------------------------------------------
// GRID: FLEXBOX HELPERS


@mixin flex {
  display: flex;
  flex-wrap: wrap;
}

.flex {
  @include flex;
}

.flex-xs {
  @include media(xsmall) {
    @include flex;
  }
}

.flex-sm {
  @include media(small) {
    @include flex;
  }
}

.flex-mid {
  @include media(medium) {
    @include flex;
  }
}

.flex-lg {
  @include media(large) {
    @include flex;
  }
}

.flex-wrap {
  flex-wrap: wrap;
}

.flex-justify-center {
  justify-content: center;
}

.flex-align-center {
  align-items: center;
}

.flex-1 {
  flex: 1;
}

.margin-left-auto {
  margin-left: auto;
}

.margin-right-auto {
  margin-right: auto;
}